services:
  reverse-proxy:
    container_name: reverse_proxy
    build:
      context: ./reverse_proxy
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/src/static:/usr/src/app/frontend_static/static
      - ./backend/static:/usr/src/app/backend_static/static
      - ./backend/media:/usr/src/app/backend_static/media
      - vault_data:/vault/data
    environment:
      - VAULT_ADDR=http://hashicorpvault:8200
    networks:
      - backend-network
    depends_on:
      backend: 
        condition: service_healthy
      frontend:
        condition: service_started
      waf:
        condition: service_started
      hashicorpvault:
        condition: service_healthy
      grafana:
        condition: service_started
      prometheus:
        condition: service_healthy

  frontend:
    container_name: transcendence_front
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/usr/src/app
    expose:
      - 8080
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
    networks:
      - backend-network

  backend:
    container_name: transcendence_back
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/usr/src/app
      - vault_data:/vault/data
    expose:
      - 8000
    networks:
      - backend-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/ht/"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      hashicorpvault:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env

  db:
    container_name: transcendence_db
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - backend-network
      - monitoring-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cache:
    image: redis:6
    container_name: transcendence_cache
    expose:
      - 6379
    networks:
      - backend-network
      - monitoring-network
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    volumes:
      - cache_data:/data
    restart: unless-stopped

  waf:
    container_name: modecurity_waf
    image: bit3/nginx-waf:1.23.1
    platform: linux/amd64
    expose:
      - 8081
    volumes:
      - ./modsecurity_waf/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./modsecurity_waf/crs-setup.conf:/usr/local/owasp-modsecurity-crs-3.2.0/crs-setup.conf
      - ./modsecurity_waf/rules/:/usr/local/owasp-modsecurity-crs-3.2.0/rules/
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped

  blockchain:
    container_name: blockchain
    environment:
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
    restart: unless-stopped
    build:
      context: ./blockchain
      args:
        GANACHE_ENV: ${GANACHE_COD}
        GANACHE_URL: ${GANACHE_URL}
        GANACHE_PORT: ${GANACHE_PORT}
      dockerfile: Dockerfile
    image: blockchain:local
    ports:
      - "8545:8545"
    volumes:
      - ./blockchain:/usr/src/app:delegated
    networks:
      - backend-network
    depends_on:
      backend:
        condition: service_started
    env_file:
      - .env

  hashicorpvault:
    container_name: hashicorpvault
    build:
      context: ./hashiCorpVault
      dockerfile: Dockerfile
    expose:
      - 8200
    volumes:
      - ./hashiCorpVault/src/vault-config.hcl:/vault/config/vault.hcl
      - vault_data:/vault/data
    environment:
      - VAULT_CLUSTER_ADDR=http://localhost:8201
      - VAULT_DEV_LISTEN_ADDRESS=
      - VAULT_UI=true
    env_file:
      - .env
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD-SHELL", "sh", "-c", "curl -s http://localhost:8200/v1/sys/health | jq -e '.initialized == true and .sealed == false and .standby == false' > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    build:
      context: ./monitoring/prometheus
      dockerfile: Dockerfile
    restart: unless-stopped
    expose:
      - 9090
    volumes:
    - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    - ./monitoring/prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/prometheus/-/healthy"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      redis_exporter:
        condition: service_started
      backend:
        condition: service_healthy
      postgres_exporter:
        condition: service_started
    networks:
      - monitoring-network
      - backend-network

  alertmanager:
    build:
      context: ./monitoring/alertmanager
      dockerfile: Dockerfile
    expose:
      - 9093
    ports:
      - 9093:9093
    environment:
      EMAIL_TO: ${DJANGO_SUPERUSER_EMAIL}
      EMAIL_FROM: ${DEFAULT_FROM_EMAIL}
      SMTP_SERVER: ${EMAIL_HOST}
      SMTP_USER: ${EMAIL_HOST_USER}
      SMTP_PASS: ${EMAIL_HOST_PASSWORD}
    networks:
      - monitoring-network
      - backend-network
    env_file:
      - .env
    restart: unless-stopped


  redis_exporter:
    image: oliver006/redis_exporter:v1.70.0-alpine
    container_name: redis_exporter
    restart: unless-stopped
    expose:
      - 9121
    command:
      - --redis.addr=redis://cache:6379
      - --redis.password=${REDIS_PASSWORD}
    depends_on:
      cache:
        condition: service_healthy
    networks:
      - monitoring-network

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: postgres_exporter
    restart: unless-stopped
    expose:
      - 9187
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - monitoring-network

  grafana:
    image: grafana/grafana:11.6.0
    container_name: grafana
    restart: unless-stopped
    environment: 
      GF_SERVER_ROOT_URL: https://localhost/grafana
      GF_SERVER_DOMAIN: localhost
      GF_SERVER_HTTP_PORT: 3000
      GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: false
      GF_SECURITY_ADMIN_USER: ${DJANGO_SUPERUSER_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_USERS_ALLOW_SIGN_UP: false
      GF_USERS_ALLOW_ORG_CREATE: false
      GF_USERS_DEFAULT_ORG_NAME: ft_transcendence
      GF_USERS_AUTO_ASSIGN_ORG: true
      GF_USERS_AUTO_ASSIGN_ORG_ROLE: Viewer
      GF_USERS_DEFAULT_THEME: light
      GF_USERS_ALLOW_USER_THEME_CHANGE: false
      GF_USERS_DEFAULT_LANGUAGE: en
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /etc/grafana/provisioning/dashboards/default.json
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    expose:
      - 3000
    networks:
      - monitoring-network
      - backend-network
    depends_on:
      prometheus:
        condition: service_healthy
      redis_exporter:
        condition: service_started
      postgres_exporter:
        condition: service_started

networks:
  backend-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  cache_data:
    driver: local
  vault_data:
    driver: local
