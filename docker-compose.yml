services:
  reverse-proxy:
    container_name: reverse_proxy
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./reverse_proxy/certs:/etc/nginx/ssl
      - ./frontend/src/static:/usr/src/app/frontend_static/static
      - ./backend/static:/usr/src/app/backend_static/static

    networks:
      - backend-network
    depends_on:
      - frontend
      - backend
      - waf
  frontend:
    container_name: transcendence_front
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/usr/src/app
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
    networks:
      - backend-network
  backend:
    container_name: transcendence_back
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/usr/src/app
    ports:
      - "8000:8000"
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env

  db:
    container_name: transcendence_db
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - backend-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cache:
    image: redis:6
    container_name: transcendence_cache
    expose:
      - 6379
    networks:
      - backend-network
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    volumes:
      - cache_data:/data
    restart: unless-stopped
#  waf:
#    container_name: modecurity_waf
#    build:
#      context: ./modsecurity_waf
#      dockerfile: Dockerfile
#    platform: linux/amd64
#    ports:
#      - "8081:8081" # WAF exposed to the client
#    depends_on:
#      - backend
#    networks:
#      - backend-network

#  blockchain:
#    container_name: blockchain
#    environment:
#      - DB_NAME=${POSTGRES_DB}
#      - DB_USER=${POSTGRES_USER}
#      - DB_PASSWORD=${POSTGRES_PASSWORD}
#      - DB_HOST=${POSTGRES_HOST}
#    restart: unless-stopped
#    build:
#      context: ./blockchain
#      args:
#        GANACHE_ENV: ${GANACHE_COD}
#        GANACHE_URL: ${GANACHE_URL}
#        GANACHE_PORT: ${GANACHE_PORT}
#      dockerfile: Dockerfile
#    image: blockchain:local
#    ports:
#      - "8545:8545"
#    volumes:
#      - ./blockchain:/usr/src/app:delegated
#    networks:
#      - backend-network
#    depends_on:
#      backend:
#        condition: service_started
#    env_file:
#      - .env

  hashicorpvault:
    container_name: hashicorpvault
    build:
      context: ./hashiCorpVault
      dockerfile: Dockerfile
    ports:
      - "8200:8200"
    volumes:
      - ./hashiCorpVault/src/vault-config.hcl:/vault/config/vault.hcl
    env_file:
      - .env
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8200/v1/sys/health" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  cache_data:
    driver: local
  blockchain_data:
    driver: local

