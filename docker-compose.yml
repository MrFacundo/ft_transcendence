services:
  reverse-proxy:
    container_name: reverse_proxy
    build:
      context: ./reverse_proxy
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/src/static:/usr/src/app/frontend_static/static
      - ./backend/static:/usr/src/app/backend_static/static
      - ./backend/media:/usr/src/app/backend_static/media
      - vault_data:/vault/data
    environment:
      - VAULT_ADDR=http://hashicorpvault:8200
    networks:
      - backend-network
    depends_on:
      backend: 
        condition: service_healthy
      frontend:
        condition: service_started
      waf:
        condition: service_started
      hashicorpvault:
        condition: service_healthy

  frontend:
    container_name: transcendence_front
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/usr/src/app
    expose:
      - 8080
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
    networks:
      - backend-network
  backend:
    container_name: transcendence_back
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/usr/src/app
      - vault_data:/vault/data
    expose:
      - 8000
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/ht/"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      hashicorpvault:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env

  db:
    container_name: transcendence_db
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - backend-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cache:
    image: redis:6
    container_name: transcendence_cache
    expose:
      - 6379
    networks:
      - backend-network
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    volumes:
      - cache_data:/data
    restart: unless-stopped
  waf:
    container_name: modecurity_waf
    image: bit3/nginx-waf:latest
    platform: linux/amd64
    expose:
      - 8081
    volumes:
      - ./modsecurity_waf/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./modsecurity_waf/crs-setup.conf:/usr/local/owasp-modsecurity-crs-3.2.0/crs-setup.conf
      - ./modsecurity_waf/rules/:/usr/local/owasp-modsecurity-crs-3.2.0/rules/
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped

  blockchain:
    container_name: blockchain
    environment:
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${POSTGRES_HOST}
    restart: unless-stopped
    build:
      context: ./blockchain
      args:
        GANACHE_ENV: ${GANACHE_COD}
        GANACHE_URL: ${GANACHE_URL}
        GANACHE_PORT: ${GANACHE_PORT}
      dockerfile: Dockerfile
    image: blockchain:local
    ports:
      - "8545:8545"
    volumes:
      - ./blockchain:/usr/src/app:delegated
    networks:
      - backend-network
    depends_on:
      backend:
        condition: service_started
    env_file:
      - .env

  hashicorpvault:
    container_name: hashicorpvault
    build:
      context: ./hashiCorpVault
      dockerfile: Dockerfile
    expose:
      - 8200
    volumes:
      - ./hashiCorpVault/src/vault-config.hcl:/vault/config/vault.hcl
      - vault_data:/vault/data
    environment:
      - VAULT_CLUSTER_ADDR=http://localhost:8201
      - VAULT_DEV_LISTEN_ADDRESS=
      - VAULT_UI=true
    env_file:
      - .env
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8200/v1/sys/health | grep '\"initialized\":true'"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - backend-network
    restart: unless-stopped

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  cache_data:
    driver: local
  vault_data:
    driver: local
