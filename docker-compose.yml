services:
  traefik:
    image: traefik:v3.1.6
    container_name: transcendence_traefik
    command: 
      - "--configFile=/config/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
      - "8082:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./reverse-proxy/conf/configuration.yml:/config/traefik.yml:ro"
      - "./reverse-proxy/certs/localhost.crt:/certs/localhost.crt:ro"
      - "./reverse-proxy/certs/localhost.key:/certs/localhost.key:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    networks:
      - backend-network
  frontend:
    container_name: transcendence_front
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/usr/src/app
    ports:
      - "8080:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"
      - "traefik.http.routers.frontend.entrypoints=websecure"
    restart: unless-stopped
    depends_on:
      - backend
    env_file:
      - .env
    networks:
      - backend-network
  backend:
    container_name: transcendence_back
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/usr/src/app
      - shared-data:/usr/src/app/shared  # Volume compartilhado com o Truffle
    ports:
      - "8000:8000"
    networks:
      - backend-network
    environment:
      - ETHEREUM_NETWORK=http://blockchain_ganache:8545
      - OTHER_ENV_VAR=value  
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      ganache:
        condition: service_started
    restart: unless-stopped
    env_file:
      - .env

  ganache:
    # image: trufflesuite/ganache-cli
    image: trufflesuite/ganache:v7.0.0
    container_name: blockchain_ganache
    restart: always
    command: ["-p", "8545", "-m", "myth like bonus scare over problem client lizard pioneer submit female collect"]
    ports:
      - "8545:8545"
    volumes:
      - ganache_data:/ganache
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "echo", "Ganache is running"]
      interval: 10s
      retries: 3

  truffle:
    container_name: blockchain_truffle
    restart: always
    build:
      context: ./truffle
      dockerfile: Dockerfile
    volumes:
      - ./truffle:/usr/src/app
      - shared-data:/usr/src/app/shared  # Volume compartilhado
    depends_on:
      ganache:
        condition: service_healthy 
    command: ["sh", "/usr/src/app/entrypoint.sh"]  # Sobrescreve o CMD do Dockerfile
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "ls", "/usr/src/app/shared/deployedAddress.json"]
      interval: 10s
      retries: 3
    
  db:
    container_name: transcendence_db
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - backend-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cache:
    image: redis:6
    container_name: transcendence_cache
    expose:
      - 6379
    networks:
      - backend-network
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - cache_data:/data
    restart: unless-stopped

  waf:
    container_name: modecurity_waf
    build:
      context: ./modsecurity_waf
      dockerfile: Dockerfile
    platform: linux/amd64
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.waf.rule=Host(`api.localhost`)"
      - "traefik.http.services.waf.loadbalancer.server.port=8081"
      - "traefik.http.routers.waf.entrypoints=websecure"
    ports:
      - "8081:8081"
    depends_on:
      - backend
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  cache_data:
    driver: local
  ganache_data:
    driver: local
  shared-data:
    driver: local

