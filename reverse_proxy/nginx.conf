events {
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    gzip on;
    gzip_types text/plain application/json application/javascript text/css image/svg+xml;
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_disable "msie6";
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;

    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    client_max_body_size 5M;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 80;
        listen [::]:80;

        server_name localhost;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;

        server_name localhost;

        ssl_certificate /etc/nginx/ssl/localhost.crt;
        ssl_certificate_key /etc/nginx/ssl/localhost.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;


        location /static/ {
            try_files $uri @backend_static;
            root /usr/src/app/frontend_static;
            expires 30d;
            add_header Cache-Control "public";
        }

        location @backend_static {
            root /usr/src/app/backend_static;
            expires 30d;
            add_header Cache-Control "public";
        }

        location /media/ {
            root /usr/src/app/backend_static;
            expires 30d;
            add_header Cache-Control "public";
        }

        location / {
            proxy_pass http://frontend:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port 443;
            proxy_redirect off;
        }

        location /api/ {
            limit_req zone=api_limit burst=10;
            rewrite ^/api$ /api/ permanent;
            proxy_pass http://waf:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port 443;
            proxy_redirect off;
        }

        location /ws/ {
            proxy_pass http://waf:8081;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /grafana/ {
            proxy_pass http://grafana:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port 443;
            proxy_redirect off;
        }

        error_page 400 /400.json;
        location = /400.json {
            add_header Content-Type application/json always;
            return 400 '{"error":{"code":400,"message":"Bad Request"}}';
        }

        error_page 401 /401.json;
        location = /401.json {
            add_header Content-Type application/json always;
            return 401 '{"error":{"code":401,"message":"Unauthorized"}}';
        }

        error_page 402 /402.json;
        location = /402.json {
            add_header Content-Type application/json always;
            return 402 '{"error":{"code":402,"message":"Payment Required"}}';
        }

        error_page 403 /403.json;
        location = /403.json {
            add_header Content-Type application/json always;
            return 403 '{"error":{"code":403,"message":"Forbidden"}}';
        }

        error_page 404 /404.json;
        location = /404.json {
            add_header Content-Type application/json always;
            return 404 '{"error":{"code":404,"message":"Not Found"}}';
        }

        error_page 405 /405.json;
        location = /405.json {
            add_header Content-Type application/json always;
            return 405 '{"error":{"code":405,"message":"Method Not Allowed"}}';
        }

        error_page 406 /406.json;
        location = /406.json {
            add_header Content-Type application/json always;
            return 406 '{"error":{"code":406,"message":"Not Acceptable"}}';
        }

        error_page 407 /407.json;
        location = /407.json {
            add_header Content-Type application/json always;
            return 407 '{"error":{"code":407,"message":"Proxy Authentication Required"}}';
        }

        error_page 408 /408.json;
        location = /408.json {
            add_header Content-Type application/json always;
            return 408 '{"error":{"code":408,"message":"Request Timeout"}}';
        }

        error_page 409 /409.json;
        location = /409.json {
            add_header Content-Type application/json always;
            return 409 '{"error":{"code":409,"message":"Conflict"}}';
        }

        error_page 410 /410.json;
        location = /410.json {
            add_header Content-Type application/json always;
            return 410 '{"error":{"code":410,"message":"Gone"}}';
        }

        error_page 411 /411.json;
        location = /411.json {
            add_header Content-Type application/json always;
            return 411 '{"error":{"code":411,"message":"Length Required"}}';
        }

        error_page 412 /412.json;
        location = /412.json {
            add_header Content-Type application/json always;
            return 412 '{"error":{"code":412,"message":"Precondition Failed"}}';
        }

        error_page 413 /413.json;
        location = /413.json {
            add_header Content-Type application/json always;
            return 413 '{"error":{"code":413,"message":"Payload Too Large"}}';
        }

        error_page 414 /414.json;
        location = /414.json {
            add_header Content-Type application/json always;
            return 414 '{"error":{"code":414,"message":"URI Too Long"}}';
        }

        error_page 415 /415.json;
        location = /415.json {
            add_header Content-Type application/json always;
            return 415 '{"error":{"code":415,"message":"Unsupported Media Type"}}';
        }

        error_page 416 /416.json;
        location = /416.json {
            add_header Content-Type application/json always;
            return 416 '{"error":{"code":416,"message":"Range Not Satisfiable"}}';
        }

        error_page 417 /417.json;
        location = /417.json {
            add_header Content-Type application/json always;
            return 417 '{"error":{"code":417,"message":"Expectation Failed"}}';
        }

        error_page 418 /418.json;
        location = /418.json {
            add_header Content-Type application/json always;
            return 418 '{"error":{"code":418,"message":"I\'m a Teapot"}}';
        }

        error_page 421 /421.json;
        location = /421.json {
            add_header Content-Type application/json always;
            return 421 '{"error":{"code":421,"message":"Misdirected Request"}}';
        }

        error_page 422 /422.json;
        location = /422.json {
            add_header Content-Type application/json always;
            return 422 '{"error":{"code":422,"message":"Unprocessable Entity"}}';
        }

        error_page 423 /423.json;
        location = /423.json {
            add_header Content-Type application/json always;
            return 423 '{"error":{"code":423,"message":"Locked"}}';
        }

        error_page 424 /424.json;
        location = /424.json {
            add_header Content-Type application/json always;
            return 424 '{"error":{"code":424,"message":"Failed Dependency"}}';
        }

        error_page 425 /425.json;
        location = /425.json {
            add_header Content-Type application/json always;
            return 425 '{"error":{"code":425,"message":"Too Early"}}';
        }

        error_page 426 /426.json;
        location = /426.json {
            add_header Content-Type application/json always;
            return 426 '{"error":{"code":426,"message":"Upgrade Required"}}';
        }

        error_page 428 /428.json;
        location = /428.json {
            add_header Content-Type application/json always;
            return 428 '{"error":{"code":428,"message":"Precondition Required"}}';
        }

        error_page 429 /429.json;
        location = /429.json {
            add_header Content-Type application/json always;
            return 429 '{"error":{"code":429,"message":"Too Many Requests"}}';
        }

        error_page 431 /431.json;
        location = /431.json {
            add_header Content-Type application/json always;
            return 431 '{"error":{"code":431,"message":"Request Header Fields Too Large"}}';
        }

        error_page 451 /451.json;
        location = /451.json {
            add_header Content-Type application/json always;
            return 451 '{"error":{"code":451,"message":"Unavailable For Legal Reasons"}}';
        }

        error_page 500 /500.json;
        location = /500.json {
            add_header Content-Type application/json always;
            return 500 '{"error":{"code":500,"message":"Internal Server Error"}}';
        }

        error_page 501 /501.json;
        location = /501.json {
            add_header Content-Type application/json always;
            return 501 '{"error":{"code":501,"message":"Not Implemented"}}';
        }

        error_page 502 /502.json;
        location = /502.json {
            add_header Content-Type application/json always;
            return 502 '{"error":{"code":502,"message":"Bad Gateway"}}';
        }

        error_page 503 /503.json;
        location = /503.json {
            add_header Content-Type application/json always;
            return 503 '{"error":{"code":503,"message":"Service Unavailable"}}';
        }

        error_page 504 /504.json;
        location = /504.json {
            add_header Content-Type application/json always;
            return 504 '{"error":{"code":504,"message":"Gateway Timeout"}}';
        }

        error_page 505 /505.json;
        location = /505.json {
            add_header Content-Type application/json always;
            return 505 '{"error":{"code":505,"message":"HTTP Version Not Supported"}}';
        }

        error_page 506 /506.json;
        location = /506.json {
            add_header Content-Type application/json always;
            return 506 '{"error":{"code":506,"message":"Variant Also Negotiates"}}';
        }

        error_page 507 /507.json;
        location = /507.json {
            add_header Content-Type application/json always;
            return 507 '{"error":{"code":507,"message":"Insufficient Storage"}}';
        }

        error_page 508 /508.json;
        location = /508.json {
            add_header Content-Type application/json always;
            return 508 '{"error":{"code":508,"message":"Loop Detected"}}';
        }

        error_page 510 /510.json;
        location = /510.json {
            add_header Content-Type application/json always;
            return 510 '{"error":{"code":510,"message":"Not Extended"}}';
        }

        error_page 511 /511.json;
        location = /511.json {
            add_header Content-Type application/json always;
            return 511 '{"error":{"code":511,"message":"Network Authentication Required"}}';
        }
    }
}
